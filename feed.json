{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Annalytic.com",
  "language": "en",
  "home_page_url": "https://www.annalytic.com/",
  "feed_url": "https://www.annalytic.com/feed.json",
  "description": "Frontend and backend development, web performance, UX design, technical content strategy, and more",
  "author": {
    "name": "Anna Monus",
    "url": "https://www.annalytic.com/"
  },
  "items": [
    {
      "id": "https://www.annalytic.com/network-packet-analysis-part2.html",
      "url": "https://www.annalytic.com/network-packet-analysis-part2.html",
      "title": "Network packet analysis â€“ Part II: Practice",
      "content_html": "<p><a href=\"https://www.wireshark.org/\">Wireshark</a> is a cross-platform network capture and analysis tool that gives you insight into your network traffic, including a detailed breakdown of each data packet. It can be used for improving network and application performance, detecting security threats, troubleshooting networking issues, and more.</p>\n\n<p>Unlike other network analysis tools, such as <a href=\"https://www.tcpdump.org/\">tcpdump</a>, Wireshark has a graphical user interface that allows you to inspect network packets visually, without the use of a command line interface. This post looks into how packet capturing with Wireshark works in practice.</p>\n<p><em>If you are interested in the brief theory of network packet analysis, check out the <a href=\"https://www.annalytic.com/network-packet-analysis-part1.html\" target=\"_blank\">first part of this article</a>, too, which discusses TCP/IP layers, protocols, packets, and internet communication overall.</em></p>\n\n<h2 id=\"what-are-wireshark-frames\">What are Wireshark frames?</h2>\n\n<p>Packets in Wireshark are called frames. A <a href=\"https://wiki.wireshark.org/Protocols/frame\">frame</a> is a pseudo-protocol developed by Wireshark that you can see at the top of each Wireshark capture &mdash; it's essentially the summary of all the underlying data managed by a <a href=\"https://www.annalytic.com/network-packet-analysis-part1.html#composition-of-network-packet\">set of communication protocols</a> (e.g. total byte size, arrival time, frame number, etc.).</p>\n\n<p>Network packets, overall, are not static entities. A Wireshark capture is the snapshot of <em>one</em> moment &mdash; when Wireshark recognizes the presence of the packet. However, the packet is built up gradually, and each protocol involved in the process adds data to it.</p>\n\n<h2 id=\"start-capturing\">Start capturing</h2>\n\n<p>Wireshark can capture packets both exchanged with external servers via the internet and used within a local network.</p>\n\n<p>Before getting started with packet capturing, you need to decide which of your network connections you want to capture. Wireshark lets you choose from wired, wireless, and Bluetooth connections:</p>\n\n<figure class=\"lightbox\">\n    <a class=\"sl-fixed\" href=\"https://www.annalytic.com/assets/img/posts/network-packet-analysis-part2/wireshark-choose-connection.jpg\">\n        <img class=\"img-fluid\" src=\"https://www.annalytic.com/assets/img/posts/network-packet-analysis-part2/wireshark-choose-connection.jpg\" alt=\"Choose a network connection in Wireshark\" title=\"Wireshark &ndash; Welcome screen\" />\n    </a>\n    <figcaption>Wireshark &ndash; Welcome screen</figcaption>\n</figure>\n\n<h2 id=\"the-look-of-a-wireshark-packet\">What does a Wireshark packet look like?</h2>\n\n<p>Each network packet has a layered structure defined by the <a href=\"https://www.rfc-editor.org/rfc/rfc1122.html#page-9\">Internet Protocol Suite</a>. A Wireshark capture is named after its top-level protocol, which can belong to the application (HTTP, TLS, DNS, etc.), transport (UDP, TCP, QUIC), or link layer (e.g. ARP) &mdash; for example, you can have HTTP, QUIC, DNS, TCP, and other captures.</p>\n\n<h3 id=\"example-1\">Example 1: UDP + DNS</h3>\n\n<p>Here's a screenshot of the overall look of the Wireshark UI and the breakdown of a DNS (Domain Name Server) query &mdash; the DNS conversation (request: Frame 10 and response: Frame 11) is colored in red:</p>\n\n<figure class=\"lightbox\">\n    <a class=\"sl-fixed\" href=\"https://www.annalytic.com/assets/img/posts/network-packet-analysis-part2/wireshark-dns-capture-example.png\">\n        <img class=\"img-fluid\" src=\"https://www.annalytic.com/assets/img/posts/network-packet-analysis-part2/wireshark-dns-capture-example.png\" alt=\"DNS capture example\" title=\"DNS query example (Frame 10: Ethernet, IPv4, UDP, DNS)\" />\n    </a>\n    <figcaption>DNS query example (Frame 10: Ethernet, IPv4, UDP, DNS)</figcaption>\n</figure>\n\n<p>In the top pane (<a href=\"https://www.wireshark.org/docs/wsug_html_chunked/ChUsePacketListPaneSection.html\">Packet List</a>), you can see the packets captured by Wireshark, the middle pane (<a href=\"https://www.wireshark.org/docs/wsug_html_chunked/ChUsePacketDetailsPaneSection.html\">Packet Details</a>) shows the used protocol stack (Ethernet, IPv4, UDP, DNS), and the bottom pane (<a href=\"https://www.wireshark.org/docs/wsug_html_chunked/ChUsePacketBytesPaneSection.html\">Packet Bytes</a>) shows the canonical hex dump of the packet data.</p>\n\n<p>The data encapsulated in the packet is added by four communication protocols &mdash; each belonging to a different TCP/IP layer.</p>\n\n<p>For example, Frame 10 weighs 81 bytes in total, of which:</p>\n\n<ul>\n    <li>14 bytes are link-layer data added by the Ethernet protocol</li>\n    <li>20 bytes are internet-layer data added by IPv4</li>\n    <li>8 bytes are transport-layer data added by UDP</li>\n    <li>39 bytes are application-layer data added by the DNS protocol</li>\n</ul>\n\n<p>Wireshark is showing the number of bytes added by each protocol in the bottom-left corner of the UI as you're clicking through the protocols in the Packet Details pane.</p>\n\n<h2 id=\"other-examples-of-wireshark-captures\">Other examples of Wireshark captures</h2>\n\n<p>Now, let's see some other examples of Wireshark captures of different protocol stacks, too.</p>\n\n<p>As we're on an Ethernet connection, the link layer always uses the Ethernet protocol, and the internet layer is always handled by IPv4 on this connection.</p> \n\n<p>The transport layer is either TCP or UDP &mdash; these are the two transport protocols that all operating systems and devices support. QUIC, which is a new transport protocol, runs on top of UDP and extends it with additional features &mdash; it can be thought of as a high-level transport protocol that includes performance and security features.</p>\n\n<p>Application-layer data is delivered to the destination by either TCP or UDP &mdash; e.g. HTTP/1.1, HTTP/2, and TLS use TCP, while QUIC, DNS, and HTTP/3 use UDP for transport.</p>\n\n<h3 id=\"example-2\">Example 2: TCP three-way handshake + unencrypted HTTP/1.1 request</h3>\n\n<p>HTTP/1.1 uses TCP (Transmission Control Protocol) as transport protocol. The communication starts with TCP's <a href=\"https://www.geeksforgeeks.org/tcp-3-way-handshake-process/\" three-way=\"\"> (SYN, SYN-ACK, ACK) handshake</a> that establishes the connection between the client and server. The client sends the first HTTP request (Frame 240) to the server immediately after the ACK packet (Frame 239).</p>\n\n<p><em>On the screenshots below:</em></p> \n<ul style=\"list-style-type: none;\">\n    <li><em>Red border = packets sent by the client</em></li>\n    <li><em>Blue border = packets sent by the server</em></li>\n</ul>\n\n<figure class=\"lightbox\">\n    <a class=\"sl-fixed\" href=\"https://www.annalytic.com/assets/img/posts/network-packet-analysis-part2/wireshark-tcp-http-unencrypted.png\">\n        <img class=\"img-fluid\" src=\"https://www.annalytic.com/assets/img/posts/network-packet-analysis-part2/wireshark-tcp-http-unencrypted.png\" alt=\"TCP and HTTP/1.1\" title=\"TCP three-way handshake and an unencrypted HTTP/1.1 GET request\" />\n    </a>\n    <figcaption>TCP three-way handshake and an unencrypted HTTP/1.1 GET request</figcaption>\n</figure>\n\n<h3 id=\"example-3\">Example 3: TLS v1.2 handshake + secured HTTPS application data</h3>\n\n<p>The TLS (Transport Layer Security) protocol is an application-layer security protocol used for encrypting data sent by other application-layer protocols such as HTTP, SMTP, and FTP.</p> \n\n<p>When it encrypts HTTPS data (can be HTTP/1.1 or HTTP/2), it uses the <a href=\"https://www.ssl2buy.com/wiki/port-80-http-vs-port-443-https\">TCP 443 port</a> for the transfer. So, when you see a TLS packet in Wireshark that connects to the server's TCP 443 port, it hides either HTTP/1.1 or HTTP/2 data that you can't see by default &mdash; to read the encrypted data you need to <a href=\"https://wiki.wireshark.org/TLS#tls-decryption\">decrypt the TLS packet</a> (for which, you'll need the appropriate session keys).</p>\n\n<p>TLS currently has two versions in use: TLS v1.2 and TLS v1.3 &mdash; the newer version coming with significant performance and security improvements.</p> \n\n<p>First, let's see what the TLS v1.2 handshake looks like in Wireshark.</p>\n\n<p>The TLS handshake starts immediately after the TCP handshake successfully finishes and the <a href=\"https://www.howtouselinux.com/post/tcp-socket\">TCP socket</a> between the client and the server is opened. The <a href=\"https://www.cloudflare.com/learning/ssl/what-happens-in-a-tls-handshake/\">authentication process</a> takes two full round-trips (one trip can include more than one frame &mdash; see <a href=\"https://www.wireshark.org/docs/wsug_html_chunked/ChAdvReassemblySection.html\">how packet reassembly works in Wireshark</a>).</p> \n\n<p>The client can send the first application-layer HTTP request (Frame 6113) only after the third round-trip (one for the TCP handshake, two for the TLS v1.2 handshake).</p>\n\n<p>See the <a href=\"https://thesecmaster.com/decoding-tls-v1-2-protocol-handshake-with-wireshark/\">detailed breakdown of the TLS v1.2 handshake</a> on TheSecMaster.</p>\n\n<figure class=\"lightbox\">\n    <a class=\"sl-fixed\" href=\"https://www.annalytic.com/assets/img/posts/network-packet-analysis-part2/wireshark-tls-v12-handshake.png\">\n        <img class=\"img-fluid\" src=\"https://www.annalytic.com/assets/img/posts/network-packet-analysis-part2/wireshark-tls-v12-handshake.png\" alt=\"TLS v1.2 handshake\" title=\"TLS v1.2 handshake and an encrypted HTTPS request\" />\n    </a>\n    <figcaption>TLS v1.2 handshake and an encrypted HTTPS request</figcaption>\n</figure>\n\n<h3 id=\"example-4\">Example 4: TLS v1.3 handshake + secured HTTPS application data</h3>\n\n<p>In TLS v1.3, the TLS handshake requires fewer messages between the client and server &mdash; it only takes one round-trip.</p> \n\n<p>As you can see below, the client immediately sends the first HTTP request (Frame 340) once the 'Server Hello' message and the cipher spec and other server data arrive and the server starts encrypting the data (Frame 339). \n\n</p><p>See the <a href=\"https://thesecmaster.com/decoding-tls-1-3-protocol-handshake-with-wireshark/\">detailed breakdown of the TLS v1.3 handshake</a> on TheSecMaster.</p>\n\n<figure class=\"lightbox\">\n    <a class=\"sl-fixed\" href=\"https://www.annalytic.com/assets/img/posts/network-packet-analysis-part2/wireshark-tls-v13-handshake.png\">\n        <img class=\"img-fluid\" src=\"https://www.annalytic.com/assets/img/posts/network-packet-analysis-part2/wireshark-tls-v13-handshake.png\" alt=\"TLS v1.3 handshake\" title=\"TLS v1.3 handshake and an encrypted HTTPS request\" />\n    </a>\n    <figcaption>TLS v1.3 handshake and an encrypted HTTPS request</figcaption>\n</figure>\n\n<h3 id=\"example-5\">Example 5: TLS v1.3 handshake with 0-RTT resumption</h3>\n\n<p>TLS v1.3 also has a <a href=\"https://ldapwiki.com/wiki/0-RTT%20Handshakes\">0-RTT</a> (Zero Round-Trip Time or 'early data') feature that allows the client to send an HTTP request on the first flight on connections it has previously established with the server.</p>\n\n<figure class=\"lightbox\">\n    <a class=\"sl-fixed\" href=\"https://www.annalytic.com/assets/img/posts/network-packet-analysis-part2/wireshark-tls-v13-handshake-0rtt.png\">\n        <img class=\"img-fluid\" src=\"https://www.annalytic.com/assets/img/posts/network-packet-analysis-part2/wireshark-tls-v13-handshake-0rtt.png\" alt=\"TLS v1.3 handshake with 0-RTT\" title=\"TLS v1.3 handshake with 0-RTT connection setup\" />\n    </a>\n    <figcaption>TLS v1.3 handshake with 0-RTT connection setup</figcaption>\n</figure>\n\n<h3 id=\"example-6a\">Example 6: UDP + QUIC with 0-RTT + HTTP/3 data</h3>\n\n<p>QUIC is a new-ish communication protocol (standardized in 2021, but it's already widely used) that runs on top of UDP and serves as the transport-layer protocol for HTTP/3 (+ some new application-layer protocols also use QUIC).</p> \n\n<p>As QUIC includes the TLS v1.3 security protocol, it can be used to set up a fully encrypted 0-RTT connection between the client and server (QUIC encrypts more data than TLS v1.3).</p> \n\n<p>Data sent with QUIC is always encrypted. If it uses the server's UDP 443 port for the connection and you see the 'Protected Payload' info in Wireshark, then it hides HTTP/3 application data &mdash; to read its contents, you need to decrypt the packet in Wireshark using the belonging cryptographic session keys.</p>\n\n<figure class=\"lightbox\">\n    <a class=\"sl-fixed\" href=\"https://www.annalytic.com/assets/img/posts/network-packet-analysis-part2/wireshark-udp-quic-0rtt-http3.png\">\n        <img class=\"img-fluid\" src=\"https://www.annalytic.com/assets/img/posts/network-packet-analysis-part2/wireshark-udp-quic-0rtt-http3.png\" alt=\"QUIC with 0-RTT\" title=\"A QUIC stream with 0-RTT connection setup\" />\n    </a>\n    <figcaption>A QUIC stream with 0-RTT connection setup</figcaption>\n</figure>\n\n<p id=\"example-6b\">Here are the details of the UDP header belonging to Frame 126 above. As you can see, the header is just 8 bytes: 2 bytes for the source port data in hex dump format (d8 e1), 2 bytes for the destination port (01 bb), 2 bytes for the length (05 55), and 2 bytes for the checksum (f4 39).</p> \n\n<p>It transports a protected QUIC payload of 1357 bytes in total, split into three parts. This is because it's the first frame in the stream that includes different types of data &mdash; you can see the details if you expand each part in the Packet Details pane. However, most frames transport the QUIC payload in one part.</p>\n\n<figure class=\"lightbox\">\n    <a class=\"sl-fixed\" href=\"https://www.annalytic.com/assets/img/posts/network-packet-analysis-part2/wireshark-udp-expanded.png\">\n        <img class=\"img-fluid\" src=\"https://www.annalytic.com/assets/img/posts/network-packet-analysis-part2/wireshark-udp-expanded.png\" alt=\"UDP details\" title=\"Details of the UDP header belonging to the previous QUIC stream\" />\n    </a>\n    <figcaption>Details of the UDP header belonging to the previous QUIC stream</figcaption>\n</figure>\n\n<h2 id=\"conclusion-and-resources\">Conclusion &amp; resources</h2>\n\n<p>This two-part article was a very brief intro to the theory and practice of network packet analysis and communication protocols.</p> \n\n<p>It discussed:</p>\n\n<ul class=\"list-positive\" style=\"margin-left: 1.5rem;\">\n    <li>the composition of a network packet in theory</li>\n    <li>the TCP/IP model and its four layers</li>\n    <li>the step-by-step process of how an HTTP request takes place on the network</li>\n    <li>the detailed breakdown of a Wireshark capture</li>\n    <li>examples of UDP-DNS, TCP-HTTP/1.1, TCP-TLSv1.2-HTTPS, TCP-TLSv1.3-HTTPS (with and without 0-RTT), and UDP-QUIC-HTTP/3 packet captures</li>\n</ul>\n\n<p>To learn more about the subject, here are some useful resources too:</p>\n\n<h3>Wireshark filters</h3>\n\n<ul class=\"document-list\">\n    <li><a href=\"https://networkproguide.com/epic-list-top-searched-wireshark-display-filters/\">Epic List of Top Searched Wireshark Display Filters</a> by Chase Smith on NetworkProGuide</li>\n    <li><a href=\"https://www.networkdatapedia.com/post/2019/01/29/top-10-wireshark-filters\">Top 10 Wireshark Filters</a> by Chris Greer on NetworkDataPedia</li>\n</ul>\n\n<h3>Recommended videos</h3>\n\n<ul class=\"video-list\">\n    <li><a href=\"https://www.youtube.com/watch?v=5qecyZHL-GU\">How to decrypt HTTPS traffic with Wireshark</a> on Chris Greer's YouTube channel</li>\n</ul>\n\n<h3>Recommended articles</h3>\n\n<ul class=\"document-list\">\n    <li><a href=\"https://www.a10networks.com/glossary/key-differences-between-tls-1-2-and-tls-1-3/\">Key differences between TLS 1.2 and TLS 1.3</a> in A10 Network's Glossary of Terms</li>\n</ul>\n\n<h3>On this blog</h3>\n<ul class=\"internal-post-list\">\n    <li><a href=\"https://www.annalytic.com/network-packet-analysis-part1.html\">Network packet analysis &ndash; Part I: Theory</a> &ndash; A brief intro to TCP/IP layers, protocols, packets, and internet communication overall</li>\n    <li><a href=\"https://www.annalytic.com/rfc-collection-http3-quic.html\">The most important RFCs to understand HTTP/3 and QUIC</a> &ndash; A non-comprehensive collection of specifications related to HTTP and the underlying security and transport-layer protocols</li>\n</ul>\n",
      "date_published": "2022-09-20T00:00:00Z"
    }
    ,
    {
      "id": "https://www.annalytic.com/network-packet-analysis-part1.html",
      "url": "https://www.annalytic.com/network-packet-analysis-part1.html",
      "title": "Network packet analysis â€“ Part I: Theory",
      "content_html": "<p>Network packet analysis can help you understand the performance and security implications of a network or application. Packets are important because the internet is a packet-switched network &mdash; as opposed to circuit-switched networks such as voice telephone networks (see a comparison table of <a href=\"https://www.geeksforgeeks.org/difference-between-circuit-switching-and-packet-switching/\">packet vs circuit switching</a> by GeeksforGeeks).</p> \n\n<p>Information sent over the web is split into small data units (packets) where each packet includes all the information necessary for identification and routing, such as source and destination addresses and protocol identifiers.</p>\n\n<p>Thus, the internet is inherently a connectionless network, which means that:</p>\n<ul>\n    <li>there's no established connection between the server and the client</li> \n    <li>packets are independent of each other</li>\n    <li>every packet chooses the best route available for transmission (i.e. different packets can use different routes for delivery)</li>\n</ul>\n\n<h2 id=\"composition-of-network-packet\">The composition of a network packet</h2>\n\n<p>Network packets have a layered structure where each layer:</p>\n\n<ul>\n    <li>is associated with a distinct stage of network communication</li>\n    <li>exchanges data between different hardware and software platforms belonging to that stage (e.g. routers, device drivers, network interface controllers, ports, web servers, browsers, etc.)</li>\n    <li>is implemented by different communication protocols</li>\n</ul>\n\n<section class=\"info-section\">\n<h3 class=\"info-title\">What are communication protocol layers?</h3>\n\n<p>The <a href=\"https://www.rfc-editor.org/info/rfc1122\">TCP/IP model</a> (also known as the Internet Protocol Suite) specifies the standards of network communication over the internet. It consists of four layers &mdash; each communication protocol belongs to one layer. The layers are as follows:</p>\n<ol>\n    <li>LAYER 1 &ndash; <strong>Link (or network access) layer</strong> (protocols: Ethernet, PPP, etc.)</li>\n    <li>LAYER 2 &ndash; <strong>Internet layer</strong> (protocols: IP, IPsec, ARP, etc.)</li>\n    <li>LAYER 3 &ndash; <strong>Transport layer</strong> (protocols: UDP, TCP, QUIC, etc.)</li>\n    <li>LAYER 4 &ndash; <strong>Application layer</strong> (protocols: HTTP, DNS, TLS, etc.)</li>\n</ol>\n</section>\n\n<p>The data encapsulated in a packet belongs to three or four layers  &mdash; therefore, it's regulated by a set of protocols. The layers together represent a part or the whole of the TCP/IP model (e.g. an HTTP/1.1 packet also includes the TCP, IP, and Ethernet layers).</p>\n\n<p>In the diagram below, you can see the structure of a theoretical packet carrying application data &mdash; in real life, the top layer would belong to an application-layer protocol, such as HTTP, DNS, TLS, etc. It uses TCP as transport protocol and also includes the IP and physical (a.k.a. MAC or Ethernet) addresses of the destination machine:</p>\n\n<figure><img class=\"img-fluid img-center\" src=\"https://www.annalytic.com/assets/img/posts/network-packet-analysis-part1/network-packet-example.jpg\" alt=\"Network packet example, diagram\" width=\"500\" height=\"368\" /><figcaption>Image credit: W. Richard Stevens &ndash; TCP/IP Illustrated, Vol. 1: The Protocols (Addison-Wesley Professional Computing Series) &ndash; <a href=\"https://flylib.com/books/en/3.223.1.18/1/\">1.6 Encapsulation</a></figcaption></figure>\n\n<p>Explanation of the above diagram from the cited book:</p>\n\n<blockquote>&quot;When an application sends data using TCP, the data is sent down the protocol stack, through each layer, until it is sent as a stream of bits across the network. Each layer adds information to the data by prepending headers (and sometimes adding trailer information) to the data that it receives. Figure 1.7 shows this process. The unit of data that TCP sends to IP is called a TCP segment. The unit of data that IP sends to the network interface is called an IP datagram. The stream of bits that flows across the Ethernet is called a frame.&quot;</blockquote>\n\n<p><em>Note that packets delivering high-level application data (i.e. HTML, CSS, JavaScript, image, and media files in binary format &mdash; either in part or the whole file, depending on the file size) are just one type of network packet. Many packets don't carry any application data, for instance, crypto packets are used for authentication such as TCP and TLS handshakes.</em></p>\n\n<h2 id=\"packets-flow-over-network\">How do packets flow over the network?</h2>\n\n<p>To see how this all works in practice, let's see a simplified example of what happens on the wire when a web page loads in the browser (for the sake of simplicity, I didn't include the TLS protocol used for encryption in HTTPS requests &mdash; the below is the description of an insecure HTTP/1.1 request that doesn't encrypt the data but transmits it as plain text):</p>\n\n<ol>\n    <li>The user enters a URL into their browser's address bar.</li>\n    <li>The browser (client) sends a DNS lookup request to the user's ISP (Internet Service Provider) to resolve the domain name to a numeric IP address &mdash; see the <a href=\"https://www.whatismyip.com/dns-lookup#overview-of-the-forward-dns-lookup-process\">process of a DNS lookup</a> in detail (DNS uses UDP for transport).</li>\n    <li>The ISP sends back the IP address of the requested domain to the user's browser.</li> \n    <li>The browser establishes a TCP connection with the web server using the IP address &mdash; sends a TCP SYN (synchronize) packet for requesting authentication (first message in the <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/TCP_handshake\">three-way TCP handshake</a>).</li>\n    <li>The server responds with a SYN-ACK (synchronize-acknowledgement) packet &mdash; it authenticates itself and also requests authentication from the browser (second message in the TCP handshake).</li>\n    <li>The browser sends a TCP ACK packet (third message in the TCP handshake) together with the first HTTP request.</li>\n    <li>The TCP socket connection between the client and server is established (further messages can be sent without authentication).</li>\n    <li>The server responds with one or more HTTP packets  that deliver the HTML document for the requested page (in later round-trips, it sends the CSS and JavaScript files, images, etc.).</li> \n</ol>\n\n<h2 id=\"analyzing-network-packets\">Analyzing network packets</h2>\n\n<p>The best way to understand how network packets move around the network is to install a packet analyzer application on your own computer that monitors the incoming and outgoing network traffic, captures packets, and visualizes them.</p>\n\n<p>In the second part of this post, you'll find a brief intro to <a href=\"https://www.wireshark.org/\">Wireshark</a>, a popular network sniffer, and examples of packet captures of the most frequently used protocols &mdash; i.e. UDP, TCP, QUIC, TLS, HTTP, and DNS.</p>\n\n<h2 id=\"resources\">Resources</h2>\n\n<p>To understand the theoretical background of network packet analysis and communication protocols better, check out one or all of the resources below.</p>\n\n<h3>Recommended books</h3>\n<ul class=\"book-list\">\n    <li>W. Richard Stevens: TCP/IP Illustrated, Vol. 1: The Protocols (Addison-Wesley Professional Computing Series) &ndash; see the <a href=\"https://en.wikipedia.org/wiki/TCP/IP_Illustrated\">related Wikipedia article</a> or have a look at the <a href=\"https://flylib.com/books/en/3.223.1/\">first edition at Flylib</a> or the <a href=\"https://www.oreilly.com/library/view/tcpip-illustrated-volume/9780132808200/\">second edition at O'Reilly Learning</a> (the first edition is available on Amazon, too)</li>\n    <li>Ilya Grigorik: High Performance Browser Networking &ndash; read the ebook at <a href=\"https://hpbn.co/\">hpbn.co</a></li>\n</ul>\n\n<h3>On this blog</h3>\n<ul class=\"internal-post-list\">\n    <li><a href=\"https://www.annalytic.com/network-packet-analysis-part2.html\">Network packet analysis â€“ Part II: Practice</a> &ndash; Capturing network traffic with Wireshark (with examples of HTTP, QUIC, TCP, UDP, and other packet captures)</li>\n    <li><a href=\"https://www.annalytic.com/rfc-collection-http3-quic.html\">The most important RFCs to understand HTTP/3 and QUIC</a> &ndash; A non-comprehensive collection of specifications related to HTTP and the underlying security and transport-layer protocols</li>\n</ul>",
      "date_published": "2022-09-01T00:00:00Z"
    }
    ,
    {
      "id": "https://www.annalytic.com/rfc-collection-http3-quic.html",
      "url": "https://www.annalytic.com/rfc-collection-http3-quic.html",
      "title": "The most important RFCs to understand HTTP/3 and QUIC",
      "content_html": "<p>The <a href=\"https://www.rfc-editor.org/\">RFC (Request for Comments) Series</a> is a numbered collection of technical specifications that standardize many of the procedures and protocols used in internet-based systems, including the communication protocols of the Internet Protocol Suite, e.g. HTTP, QUIC, UDP, TCP, and others.</p>\n\n<p>While the RFC Series is <a href=\"https://www.rfc-editor.org/search/rfc_search_detail.php\">available for anyone to peruse</a>, and each RFC has its own number, it's not always easy to find all the RFCs related to a particular subject.</p>\n\n<p>The catalog below includes the most important RFCs related to the recently published HTTP/3 and QUIC protocols, the previous versions of HTTP, and the underlying transport-layer and security protocols (QUIC, UDP, and TCP for transport and TLS for security).</p>\n<p><em>Note that this is not a comprehensive list, and there may exist other relevant specifications, too, that are not included in the collection below.</em></p> \n\n<p>The RFCs are listed in numeric order.</p>\n\n<h2>Status: Internet Standard</h2>\n<blockquote><p>&quot;A specification for which significant implementation and successful\n   operational experience has been obtained may be elevated to the\n   Internet Standard level.  An Internet Standard (which may simply be\n   referred to as a Standard) is characterized by a high degree of\n   technical maturity and by a generally held belief that the specified\n   protocol or service provides significant benefit to the Internet\n   community.</p><p>A specification that reaches the status of Standard is assigned a\n   number in the STD Series while retaining its RFC number.&quot;</p><p class=\"bq-source\">Definition of an Internet Standard &ndash; <cite><a href=\"https://www.rfc-editor.org/rfc/rfc2026.html#section-4.1.3\">RFC 2026, 4.1.3</a></cite></p>\n</blockquote>\n<ul class=\"document-list\">\n    <li><a href=\"https://www.rfc-editor.org/info/rfc768\">RFC 768</a> (STD 6*) &ndash; UDP (User Datagram Protocol)</li>\n    <li><a href=\"https://www.rfc-editor.org/info/rfc1122\">RFC 1122</a> (STD 3) &ndash; Requirements for Internet Hosts &ndash; Communication Layers (the Internet Protocol Suite, also known as the TCP/IP model)</li>\n    <li><a href=\"https://www.rfc-editor.org/info/rfc9110\">RFC 9110</a> (STD 97) &ndash; HTTP Semantics</li>\n    <li><a href=\"https://www.rfc-editor.org/info/rfc9111\">RFC 9111</a> (STD 98) &ndash; HTTP Caching</li>\n    <li><a href=\"https://www.rfc-editor.org/info/rfc9112\">RFC 9112</a> (STD 99) &ndash; HTTP/1.1 (Hypertext Transfer Protocol v1.1)</li>\n    <li><a href=\"https://www.rfc-editor.org/info/rfc9293\">RFC 9293</a> (STD 7) &ndash; TCP (Transmission Control Protocol)</li>\n</ul>\n<p><small>*STD = <a href=\"https://www.ietf.org/rfc/std-index.txt\">Standard Series</a></small></p>\n\n<h2>Status: Proposed Standard</h2>\n\n<blockquote><p>&quot;A Proposed Standard specification is generally stable, has resolved\n   known design choices, is believed to be well-understood, has received\n   significant community review, and appears to enjoy enough community\n   interest to be considered valuable.  However, further experience\n   might result in a change or even retraction of the specification\n   before it advances.&quot;</p><p class=\"bq-source\">Definition of a Proposed Standard &ndash; <cite><a href=\"https://www.rfc-editor.org/rfc/rfc2026.html#section-4.1.1\">RFC 2026, 4.1.1</a></cite></p>\n</blockquote>\n\n<h3>Protocols</h3>\n\n<ul class=\"document-list\">\n    <li><a href=\"https://www.rfc-editor.org/info/rfc5246\">RFC 5246</a> &ndash; TLS 1.2 (Transport Layer Security v1.2)</li>\n    <li><a href=\"https://www.rfc-editor.org/info/rfc8446\">RFC 8446</a> &ndash; TLS 1.3 (Transport Layer Security v1.3)</li>\n    <li><a href=\"https://www.rfc-editor.org/info/rfc9000\">RFC 9000</a> &ndash; QUIC: A UDP-Based Multiplexed and Secure Transport</li>\n    <li><a href=\"https://www.rfc-editor.org/info/rfc9113\">RFC 9113</a> &ndash; HTTP/2 (Hypertext Transfer Protocol v2)</li>\n    <li><a href=\"https://www.rfc-editor.org/info/rfc9114\">RFC 9114</a> &ndash; HTTP/3 (Hypertext Transfer Protocol v3)</li>\n</ul>\n\n<h3>Features/extensions of the above protocols</h3>\n\n<ul class=\"document-list\">\n    <li><a href=\"https://www.rfc-editor.org/info/rfc7541\">RFC 7541</a> &ndash; HPACK: Header Compression for HTTP/2</li>\n    <li><a href=\"https://www.rfc-editor.org/info/rfc8999\">RFC 8999</a> &ndash; Version-Independent Properties of QUIC</li>\n    <li><a href=\"https://www.rfc-editor.org/info/rfc9001\">RFC 9001</a> &ndash; Using TLS to Secure QUIC</li>\n    <li><a href=\"https://www.rfc-editor.org/info/rfc9002\">RFC 9002</a> &ndash; QUIC Loss Detection and Congestion Control</li>\n     <li><a href=\"https://www.rfc-editor.org/info/rfc9204\">RFC 9204</a> &ndash; QPACK: Field Compression for HTTP/3</li>\n    <li><a href=\"https://www.rfc-editor.org/info/rfc9218\">RFC 9218</a> &ndash; Extensible Prioritization Scheme for HTTP (applicable to HTTP/2 and HTTP/3)</li>\n    <li><a href=\"https://www.rfc-editor.org/info/rfc9221\">RFC 9221</a> &ndash; An Unreliable Datagram Extension to QUIC</li>\n</ul>\n\n<h2>Historical versions of HTTP</h2>\n\n<ul class=\"document-list\">\n    <li><a href=\"https://www.rfc-editor.org/info/rfc1945\">RFC 1945</a> &ndash; HTTP/1.0 (not in use anymore; status: informational)</li>\n    <li><a href=\"https://www.w3.org/Protocols/HTTP/AsImplemented.html\">The Original HTTP as defined in 1991</a> &ndash; HTTP/0.9 (not included in the RFC Series)\n</li></ul>\n\n<h2>Meta RFCs</h2>\n\n<ul class=\"document-list\">\n    <li><a href=\"https://www.rfc-editor.org/info/rfc2026\">RFC 2026</a> (BCP 9**) &ndash; The Internet Standards Process</li>\n    <li><a href=\"https://www.rfc-editor.org/info/rfc9280\">RFC 9280</a> &ndash; RFC Editor Model (Version 3)</li>\n</ul>\n<p><small>**BCP = <a href=\"https://www.ietf.org/rfc/bcp-index.txt\">Best Current Practice Series</a></small></p>",
      "date_published": "2022-08-24T00:00:00Z"
    }
    ,
    {
      "id": "https://www.annalytic.com/css-subgrid-vs-nested-grid.html",
      "url": "https://www.annalytic.com/css-subgrid-vs-nested-grid.html",
      "title": "CSS subgrid vs nested grid â€” are they the same?",
      "content_html": "<p>The <a href=\"https://caniuse.com/css-subgrid\" target=\"_blank\">CSS subgrid</a> is a new feature coming to browsers. It's already supported by Firefox, but the Chromium team is also <a href=\"https://blog.chromium.org/2020/06/improving-chromiums-browser.html\" target=\"_blank\">working on the implementation</a>. The CSS subgrid allows grid items to be included in the grid layout by adopting the grid tracks and grid lines for the area they're spanning over.</p>\n<p>Obviously, the subgrid only makes sense if the grid item spreads across more than one grid cells (you can achieve that by either using the <code>grid-column</code> and <code>grid-row</code> properties or creating named grid areas).</p> \n<p>By default, the children of grid items are not part of the grid layout. Without the subgrid feature, you need to create a nested grid and recalculate the grid tracks if you want to replicate the grid layout for the nested grid.</p>\n<p>However, a nested grid and a subgrid are not the same thing.</p>\n<h2>What is CSS subgrid?</h2>\n<p>CSS subgrid is a value you can add to the <code>grid-template-columns</code> and <code>grid-template-rows</code> properties of one or more grid item, for instance:</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.grid-container</span> <span class=\"token punctuation\">{</span><br />\t<span class=\"token property\">display</span><span class=\"token punctuation\">:</span> grid<span class=\"token punctuation\">;</span><br />\t<span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>5<span class=\"token punctuation\">,</span> 1fr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  \t<span class=\"token property\">grid-template-rows</span><span class=\"token punctuation\">:</span> <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>3<span class=\"token punctuation\">,</span> 1fr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><br /><span class=\"token selector\">.grid-item</span> <span class=\"token punctuation\">{</span><br />\t<span class=\"token property\">grid-column</span><span class=\"token punctuation\">:</span> 2 / 5<span class=\"token punctuation\">;</span>\t<br />  \t<span class=\"token property\">grid-row</span><span class=\"token punctuation\">:</span> 1 / 3<span class=\"token punctuation\">;</span><br />\t<span class=\"token property\">display</span><span class=\"token punctuation\">:</span> grid<span class=\"token punctuation\">;</span><br />\t<span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> subgrid<span class=\"token punctuation\">;</span><br />\t<span class=\"token property\">grid-template-rows</span><span class=\"token punctuation\">:</span> subgrid<span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span></code></pre>\n<p>Using this syntax, <code>.grid-item</code> will adopt the grid tracks (rows and columns) of the grid container for the area it spans over (in the above example, three columns vertically and two rows horizontally, defined by the <code>grid-row</code> and <code>grid-column</code> properties).</p>\n<h2>What is a nested grid?</h2>\n<p>A nested grid replicates the grid tracks of the parent grid, however it's still an independent grid.</p>\n<p>You can use the <code>inherit</code> value for the <code>grid-template-columns</code> and <code>grid-template-rows</code> properties of one or more grid items to create a nested grid, as follows:</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.grid-container</span> <span class=\"token punctuation\">{</span><br />\t<span class=\"token property\">display</span><span class=\"token punctuation\">:</span> grid<span class=\"token punctuation\">;</span><br />\t<span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>5<span class=\"token punctuation\">,</span> 1fr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br />  \t<span class=\"token property\">grid-template-rows</span><span class=\"token punctuation\">:</span> <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>3<span class=\"token punctuation\">,</span> 1fr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span><br /><span class=\"token selector\">.grid-item</span> <span class=\"token punctuation\">{</span><br />\t<span class=\"token property\">grid-column</span><span class=\"token punctuation\">:</span> 2 / 5<span class=\"token punctuation\">;</span>\t<br />  \t<span class=\"token property\">grid-row</span><span class=\"token punctuation\">:</span> 1 / 3<span class=\"token punctuation\">;</span><br />\t<span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inherit<span class=\"token punctuation\">;</span><br />\t<span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> inherit<span class=\"token punctuation\">;</span><br />\t<span class=\"token property\">grid-template-rows</span><span class=\"token punctuation\">:</span> inherit<span class=\"token punctuation\">;</span><br /><span class=\"token punctuation\">}</span></code></pre>\n<p>Using this syntax, <code>.grid-item</code> will copy the grid tracks of <code>.grid-container</code>. However, it will divide up its own area into five columns and three rows instead of being included in the grid layout of <code>.grid-container</code> as a subgrid.</p>\n<h2>The difference between a subgrid and a nested grid</h2>\n<p>While a nested grid is still independent of the parent grid (we have two grids), a subgrid is a part of it (we have one grid) as it gets included in the same layout &mdash; using the same rows, columns, and lines.</p>\n<p>For instance, here's an example of a nested grid when being inspected with Google Chrome's grid inspector. As you can see, the parent and nested grid have independent tracks (marked with white vs red):</p>\n<figure><img class=\"img-fluid\" src=\"https://www.annalytic.com/assets/img/posts/css-subgrid-vs-nested-grid/nested-css-grid.jpg\" alt=\"Nested CSS grid\" /></figure>\n<p>While, if we create a subgrid, it uses the same grid tracks as the parent grid:</p>\n<figure><img class=\"img-fluid\" src=\"https://www.annalytic.com/assets/img/posts/css-subgrid-vs-nested-grid/subgrid-css-grid-simulation.png\" alt=\"CSS grid subgrid simulation\" /></figure>\n<h2>Read more</h2>\n<p>This post is the recap of my longer article about <a href=\"https://webdesign.tutsplus.com/articles/css-subgrid-features-syntax-and-the-problem-itll-solve--cms-33038\" target=\"_blank\">CSS subgrid</a> published on TutsPlus Web Design where I analyze the question in detail (the two screenshots above are from this piece as well). I also show how to simulate a subgrid without having access to the <code>subgrid</code> value (even though this simulation is not perfect, as we still have two independent grids).</p>\n",
      "date_published": "2020-09-21T00:00:00Z"
    }
    ,
    {
      "id": "https://www.annalytic.com/kubernetes-on-premise-strategy.html",
      "url": "https://www.annalytic.com/kubernetes-on-premise-strategy.html",
      "title": "When is it worth deploying Kubernetes on-premises?",
      "content_html": "<p>Kubernetes is a container orchestration platform that makes it possible to deploy applications to a cluster of computers. Although Kubernetes is frequently used in the cloud, it also works well in enterprise environments. There are a couple of scenarios when deploying Kubernetes on-premises is a reasonable choice as opposed to relying on cloud platforms.</p>\n<h2>The Container-as-a-Service model</h2>\n<p>The Container-as-a-Service (CaaS) architecture allows developers to make use of container-based virtualization. Containers are different from virtual machines, as they virtualize operating systems rather than hardware configurations. As they donâ€™t have their own kernel, they share the OS of the host machine with other containers.</p>\n<p>Containers package app-level code and dependencies together and run as isolated processes. Their main advantages are as follows:</p>\n<ul>\n<li>easy portability,</li>\n<li>small size,</li>\n<li>better performance (compared to VMs),</li>\n<li>scalability,</li>\n<li>and platform-independence.</li>\n</ul>\n<p>Containers are an especially popular choice of software for microservices. The most well-known Container-as-a-Service platform is Docker.</p>\n<p>Kubernetes takes containerization to the next level. It comes into the picture when you work with a huge number of containers. Kubernetes lets you logically group containers and deploys them to a computer cluster consisting of one master and several working nodes.</p>\n<p>With Kubernetes, your application doesnâ€™t rely on one single machine and you donâ€™t have to worry about uptime. Kubernetes automatically distributes your containers across the cluster, so you can be sure that your app is up and running all the time.</p>\n<h2>Deployment strategies for Kubernetes</h2>\n<p>You can run Kubernetes on <a href=\"https://kubernetes.io/docs/setup/\" target=\"_blank\">multiple different platforms</a>. For example, you can:</p>\n<ul>\n<li>use managed Kubernetes clusters offered by public cloud platforms,</li>\n<li>create a custom cloud solution making use of private or hybrid cloud architectures,</li>\n<li>or deploy it to your on-premise data center.</li>\n</ul>\n<p>Companies, especially start-ups, frequently deploy container-based applications to the cloud, as it comes with many benefits. For instance, you can use pre-made cloud APIs, donâ€™t have to worry about server maintenance, and can ensure high availability.</p>\n<p>However, as your application scales, costs of pay-as-you-go cloud services can rapidly grow. You might also face problems like security and privacy issues on certain public cloud platforms.</p>\n<p>Under certain circumstances, cloud deployment is simply not worth the effort, as it comes with too many risks and costs. Bringing containers on-premises can be a good decision when your application:</p>\n<ul>\n<li>interoperates with other on-premise applications or databases,</li>\n<li>is a legacy monolithic application that would be too hard to move to the cloud,</li>\n<li>becomes so popular that cloud server costs get too high,</li>\n<li>relies on real-time user interactions, so data proximity matters a lot,</li>\n<li>or handles highly sensitive data that canâ€™t risk exposure.</li>\n</ul>\n<h2>Final tips</h2>\n<p>Successful on-premise deployment mainly depends on finding the right tools and setting up a suitable automated workflow. Popular cloud service platforms provide you with on-premise tools such as AWS Outposts and Azure Stack that let you run cloud-native applications on-premises.</p>\n<p>Adopting DevOps culture can also help you implement the right deployment strategy in both the cloud and on-premises, as it treats development, operations, and security as a single unit. In reality, thereâ€™s no such thing as \"serverless\". Whether you should manage your own datacenter or rely on a cloud platform depends on many parameters and can change with the environment as well.</p>",
      "date_published": "2019-08-16T00:00:00Z"
    }
    ,
    {
      "id": "https://www.annalytic.com/vue-js-within-existing-framework.html",
      "url": "https://www.annalytic.com/vue-js-within-existing-framework.html",
      "title": "Should you use Vue.js within an existing framework?",
      "content_html": "<p>Vue.js has been rapidly gaining traction in recent years. Developers love it for its flexible design, impressive ecosystem, and friendly learning curve. Vue.js is not only a popular choice for creating a new application but you can also include it within an existing framework. While this decision certainly has its pros, it comes with some challenges as well.</p>\n<h2>Why use Vue.js within another framework?</h2>\n<p>Vue.js has a couple of features that make it attractive compared to other front-end frameworks. Its component-based modular architecture makes it easy to integrate it into an existing user interface. It also has a quite active open-source community that creates loads of components, UI libraries, and plugins ready to use.</p>\n<p>Developers praise Vue.js for its reactive data binding mechanism and efficient state management, too. Vue.js automatically refreshes components whenever it's necessary, which leads to highly performant UIs. It also uses one-way data flow and rendering which makes it easier to predict the app's behavior. This can be a huge plus when you are dealing with a complex project.</p>\n<h2>Why not use Vue.js within another framework?</h2>\n<p>Ending up with an inconsistent architecture is probably the biggest risk of using Vue.js within an existing framework. You can add a few Vue.js components to your app either manually or with a tool like <a href=\"https://github.com/ngVue/ngVue\" target=\"_blank\">ngVue</a> without many problems. However, after a while, your app's complexity will be rapidly growing. Maintenance and debugging will become a chore and errors will sooner or later appear.</p>\n<p>Alternatively, you can pick a meta-framework such as <a href=\"https://github.com/CanopyTax/single-spa\" target=\"_blank\">single-spa</a> that provides a better architecture. Meta-frameworks allow you to create micro-frontends similar to backend microservices. For a new app, this can be an excellent solution but migrating an <a href=\"https://single-spa.js.org/docs/migrating-angularJS-tutorial.html\" target=\"_blank\">existing app to a meta-framework</a> poses several additional risks.</p>\n<p>You can also create two separate apps running within their own iframes and communicating through postMessage APIs. Spotify's desktop app, for instance, uses a <a href=\"https://www.quora.com/How-is-JavaScript-used-within-the-Spotify-desktop-application-Is-it-packaged-up-and-run-locally-only-retrieving-the-assets-as-and-when-needed-What-JavaScript-VM-is-used/answer/Mattias-Petter-Johansson\" target=\"_blank\">similar approach</a>. Still, finding a coherent architecture that scales without issues is not an easy task.</p>\n<p>Greater complexity can lead to issues with Webpack and other module bundlers as well. Just think about larger bundle sizes and duplicate config files. Cross-origin communication between window objects can also cause performance issues. Besides, it will take more time to test your app, as there might be unexpected interactions between the two frameworks.</p>\n<h2>The verdict</h2>\n<p>Whether it's worth adding Vue.js to your existing framework highly depends on your stack. It can be a good idea to make a cost-benefit analysis and evaluate all the potential risks. Cutting-edge Vue.js features might improve your app's user experience for sure but you have to prepare for increasing complexity and potential inconsistencies as well.</p>\n",
      "date_published": "2019-04-23T00:00:00Z"
    }
    ,
    {
      "id": "https://www.annalytic.com/jekyll-dns-config-github-pages.html",
      "url": "https://www.annalytic.com/jekyll-dns-config-github-pages.html",
      "title": "How to use a custom domain on GitHub Pages",
      "content_html": "<p>If you have a custom domain, you can quickly set it up with your <a href=\"https://jekyllrb.com/docs/github-pages/\" target=\"_blank\">Jekyll site hosted on GitHub Pages</a>. By default, GitHub Pages sites come with domains ending in <code>github.io</code>. To use your GitHub-hosted site with your custom domain, you only need to configure your DNS (Domain Name System) settings. Then, you can quickly check if your new domain properly works with the help of a DNS-testing service such as LeafDNS.</p>\n<p>GitHub lets you host your static website on its servers for free. Since May 2018, it also offers <a href=\"https://blog.github.com/2018-05-01-github-pages-custom-domains-https/\" target=\"_blank\">free HTTPS support for custom domains</a>.</p>\n<p>I will discuss the most typical use case when you want to point <i>both</i> the apex domain and the <code>www</code> subdomain to GitHub Pages. The apex domain is the (non-www) root domain without a subdomain, for instance, <code>annalytic.com</code> for me. There are other, more complicated use cases as well&mdash;<a href=\"https://help.github.com/articles/using-a-custom-domain-with-github-pages/\" target=\"_blank\">GitHub Docs</a> detail all of them comprehensively.</p>\n<p>There are two places where you need to configure your DNS settings:</p>\n<ol>\n    <li>at your domain provider</li>\n    <li>in your GitHub repo</li>\n</ol>\n\n<h2>1. DNS management in your GitHub account</h2>\n<p>Go to the Settings page of the GitHub repo of your site and enter your custom domain into the \"GitHub Pages\" section.</p>\n<figure><img class=\"img-fluid\" src=\"https://www.annalytic.com/assets/img/posts/jekyll-dns-config-github-pages/github-pages-custom-domain.jpg\" alt=\"GitHub Pages custom domain settings\" /></figure>\n<p>This setting automatically creates a <code>CNAME</code> record in the root folder of your repo. <a href=\"https://support.google.com/a/answer/112037?hl=en\" target=\"_blank\">CNAME</a> stands for Canonical Name and DNS servers use it to alias one domain name to another. You can also make GitHub use HTTPS with your custom domain by ticking the \"Enforce HTTPS\" checkbox.</p>\n<h2>2. DNS management at your DNS provider</h2>\n<p>Log in to your account at your domain provider and navigate to the \"DNS Management\" (or similarly named) section inside the admin area. Here, you need to do two things:</p>\n<ol>\n    <li>Create <code>A</code> records that point your apex domain to GitHub Pages' servers. You need to create four <code>A</code> records.</li>\n    <li>Create a <code>CNAME</code> record that points the www subdomain to your default GitHub Pages site.</li>\n</ol>\n<p>Here are the five DNS records you need to set up:</p>\n<pre class=\"language-log\"><code class=\"language-log\">Host Name       Record Type         Address<br /><span class=\"token operator\">@</span>               A <span class=\"token operator\">(</span>Address<span class=\"token operator\">)</span>         <span class=\"token ip-address constant\">185.199.108.153</span><br /><span class=\"token operator\">@</span>               A <span class=\"token operator\">(</span>Address<span class=\"token operator\">)</span>         <span class=\"token ip-address constant\">185.199.109.153</span><br /><span class=\"token operator\">@</span>               A <span class=\"token operator\">(</span>Address<span class=\"token operator\">)</span>         <span class=\"token ip-address constant\">185.199.110.153</span><br /><span class=\"token operator\">@</span>               A <span class=\"token operator\">(</span>Address<span class=\"token operator\">)</span>         <span class=\"token ip-address constant\">185.199.111.153</span><br />www             CNAME <span class=\"token operator\">(</span>Alias<span class=\"token operator\">)</span>       yoursite<span class=\"token punctuation\">.</span>github<span class=\"token punctuation\">.</span>io</code></pre>\n<p>If you get stuck somewhere have a look at the detailed documentation about how to set up GitHub Pages with a <a href=\"https://help.github.com/articles/setting-up-an-apex-domain/\" target=\"_blank\">custom apex domain</a> and a <a href=\"https://help.github.com/articles/setting-up-a-www-subdomain/\" target=\"_blank\">www subdomain</a>.</p>\n<h2>Check if everything's all right</h2>\n<p>You usually have to wait up to 24 hours until the changes propagate. Then, you can check the health of your DNS servers by running a free DNS test with <a href=\"http://leafdns.com/\" target=\"_blank\">Leaf DNS</a> or a similar provider. You should see something like this:</p>\n<figure><img class=\"img-fluid\" src=\"https://www.annalytic.com/assets/img/posts/jekyll-dns-config-github-pages/leafdns-test-github-pages.jpg\" alt=\"Leaf DNS test for GitHub Pages\" /></figure>\n<p>GitHub also shows a warning if there are any problems with your configuration. That's all.</p>\n",
      "date_published": "2018-09-27T00:00:00Z"
    }
    ,
    {
      "id": "https://www.annalytic.com/link-accessibility-colors-not-enough.html",
      "url": "https://www.annalytic.com/link-accessibility-colors-not-enough.html",
      "title": "Link accessibility â€“ Colors are not enough",
      "content_html": "<p>Link accessibility is one of the most important aspects of usability. However, designers often don't understand what it takes to make links accessible. Most frequently, they only distinguish links by color, which makes it hard for users with visual disabilities to spot them in text blocks &mdash; even if high color contrast is used.</p> \n<p>As a rule of thumb, accessible links shouldn't rely solely on colors. Partly because users with low vision, color deficiency, and other visual impairments can't always recognize this kind of link, but also because it's easier for regular users to skim through the content if links are better emphasized.</p>\n<p>However, it's not always easy to find out how to create accessible links that match your website design. It's also possible to overdo it by using too many visual signifiers that might confuse the user.</p>\n<h2>Link types</h2>\n<p>When we speak about links, we usually think of the classic blue links with an underline, however there are actually different kinds of links, such as:</p>\n<ul>\n    <li>body text links,</li>\n    <li>headline and subtitle links,</li>\n    <li>menu links,</li>\n    <li>buttons,</li>\n    <li>image links,</li>\n    <li>video links,</li>\n    <li>audio links,</li>\n    <li>and more.</li>\n</ul>\n<p>In this article, I'll only speak about the first group: body text links. Don't read it as a guideline but rather an experiment for understanding what can be done for more accessible links.</p>\n<h2>Accessible links according to WCAG 2.0</h2>\n<p>According to <a href=\"https://webaim.org/techniques/hypertext/link_text\" target=\"_blank\">WebAIM's guidelines about links and hypertext</a>, WCAG 2.0 has two additional requirements for body text links:</p>\n<ol>\n    <li>The link text must have a 3:1 contrast ratio from the surrounding non-link text.</li>\n    <li>The link must present a \"non-color designator\" (typically the introduction of the underline) on both mouse hover and keyboard focus.</li>\n</ol>\n<p>Web browsers come with a default link styling that meets these requirements. You can check it out by disabling all additional CSS styles using the <a href=\"https://chrispederick.com/work/web-developer/\" target=\"_blank\">Web Developer</a> browser add-on or another dev tool. For example, this is how the homepage of the Mozilla Developer Network looks like in Chrome:</p>\n<figure><img class=\"img-fluid\" src=\"https://www.annalytic.com/assets/img/posts/link-accessibility-colors-not-enough/basic-chrome-styling.jpg\" alt=\"Basic Chrome Styling\" /></figure>\n<p>It's a very basic styling for sure, but it's still styling: the underlined blue links are well-known and internet users can easily recognize them. It's not a coincidence that the Nielsen-Norman Group also names blue the safest link color choice in its \"<a href=\"https://www.nngroup.com/articles/clickable-elements/\" target=\"_blank\">Beyond Blue Links: Making Clickable Elements Recognizable</a>\" article.</p>\n<h2>Examples of accessible links</h2>\n<p>WebAIM doesn't recommend removing the underline using CSS, as \"users are accustomed to see links underlined\". Still, many of the biggest websites don't follow this principle of link accessibility. Many times, they don't only remove the underline from the default link state but also the <code>:hover</code> styles.</p>\n<p>But, why do they do that? Mainly for aesthetical reasons, however underlined links don't necessarily have to be plain-looking and boring.</p>\n<h3>1. Border-bottom</h3>\n<p>For instance, Bloomberg uses the <code>border-bottom</code> property to mimic an underline in a different color. As you can see below, the link texts are black while the underlines are blue, which gives a stylish design to the links.</p>\n<figure><img class=\"img-fluid\" src=\"https://www.annalytic.com/assets/img/posts/link-accessibility-colors-not-enough/bloomberg-link-signifier.jpg\" alt=\"Bloomberg border bottom as link signifier\" /></figure>\n<p>Perhaps Bloomberg's links could further benefit from bold letters, but it's a good example that underlines can be used for links creatively, not just in the usual way.</p>\n<h3>2. Reverse underline</h3>\n<p>The Verge uses a different approach to create underlines for body text links. Here, underlines are present by default, however they are removed when the user hovers over the link. When the underline disappears, the color also changes subtlely, from pink to magenta (however this color change is barely recognizable).</p>\n<figure><img class=\"img-fluid\" src=\"https://www.annalytic.com/assets/img/posts/link-accessibility-colors-not-enough/the-verge-link-underline.jpg\" alt=\"Underlined links in The Verge\" /></figure>\n<p>The presence of underlines in the default state helps readers easily notice the links, even within large text blocks. And, when they hover over the link, the state change is instantly visualized by the disappearing underline. An unusual choice, for sure, but it still follows the principle of using non-color designators for accessible links.</p>\n<h3>3. Icons</h3>\n<p>You can also help users recognize links by adding tiny icons next to them. For example, some news sites add a video icon next to the links that point to videos (however, embedding videos is a more widely used practice these days).</p>\n<p>WebAIM chose an all-inclusive solution for link accessibility. Besides the underline, they also add a small icon after each external link. In this way, the icon doesn't only serve as an extra visual signifier but also clearly distinguishes external and internal links.</p>\n<figure><img class=\"img-fluid\" src=\"https://www.annalytic.com/assets/img/posts/link-accessibility-colors-not-enough/webaim-external-link-icon.jpg\" alt=\"WebAIM external link icon\" /></figure>\n<p>You don't necessarily need to create a link icon by yourself. For instance, Font Awesome has an <a href=\"https://fontawesome.com/icons/external-link-alt?style=solid&from=io\" target=\"_blank\">external link icon</a> that you can quickly add to your links.</p>\n<figure><img class=\"img-fluid\" src=\"https://www.annalytic.com/assets/img/posts/link-accessibility-colors-not-enough/font-awesome-external-link.jpg\" alt=\"Font Awesome external links\" /></figure>\n<h3>4. Link text</h3>\n<p>As screen readers notify users when they come across a link, it's not recommended to use phrases such as \"link to\" or \"follow this link\" for the link text. Instead, you should provide link texts that describe the main content of the link. It makes it easier for users to decide if they want to click the link, which is especially important for users with <a href=\"https://webaim.org/articles/cognitive/\" target=\"_blank\">cognitive disabilities</a>.</p>\n<p>WCAG 2.0 even has a recommendation on how to <a href=\"https://www.w3.org/TR/2008/WD-WCAG20-TECHS-20081103/H30.html\" target=\"_blank\">provide proper link texts</a>, with a handful of useful examples (mainly for image links, though).</p>\n<p>If you want to see an example of proper link text I would mention the Gov.uk website that publishes governmental information in the UK. For example, check out their <a href=\"https://www.gov.uk/set-up-business\" target=\"_blank\">Set up a business</a> page.</p>\n<figure><img class=\"img-fluid\" src=\"https://www.annalytic.com/assets/img/posts/link-accessibility-colors-not-enough/gov.uk-link-texts.jpg\" alt=\"Gov.uk Link Texts\" /></figure>\n<p>Have a look at, for instance, the <em>Find out more about being a sole trader and how to register</em> line on the screenshot above. Note that they put the anchor tag on the part that describes the purpose of the link (\"being a sole trader and how to register\") instead of the action verb (\"find out more\").</p>\n<h2>The controversial role of the <code>title</code> attribute</h2>\n<p>The role of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title\" target=\"_blank\"><code>title</code> global attribute</a> in link accessibility is an interesting question. If you add it to a link, the extra information appears somewhere around the link when users hover it.</p>\n<p>For instance, take the following line of HTML:</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Extra information<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Hover this link but don't click it.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>It's displayed like this in the browser: <a href=\"https://www.annalytic.com/link-accessibility-colors-not-enough.html#\" title=\"Extra information\">Hover this link but don't click it.</a></p>\n<p>I've long thought that adding the <code>title</code> attribute to links is a good practice for accessibility, as the extra information helps users understand the purpose of the link.  However, WCAG 2.0 has a slightly different view on the question.</p>\n<p>On their \"<a href=\"https://www.w3.org/TR/2008/WD-WCAG20-TECHS-20081103/H33.html\" target=\"_blank\">Supplementing link text with the title attribute</a>\" page, they mention several accessibility problems. For example, the <code>title</code> attribute isn't available to assistive technology and keyboard-only users. Besides, it disappears after about five seconds in some user agents, which usually doesn't leave enough time to read it.</p>\n<p>On the whole, WCAG 2.0 doesn't advise against the <code>title</code> attribute but recommends careful usage. One thing is sure, never use <code>title</code> for important information that is not available in another form, such as warnings. On another note, if <code>title</code> can be used only for unimportant information, is it worth using at all?</p>\n<h2>Link states</h2>\n<p>There are five different link states, represented by CSS pseudo-classes: <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:hover\" target=\"_blank\"><code>:hover</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:focus\" target=\"_blank\"><code>:focus</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:active\" target=\"_blank\"><code>:active</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:visited\" target=\"_blank\"><code>:visited</code></a>, and <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:link\" target=\"_blank\"><code>:link</code></a>.</p>\n<p>It's an open question whether it's better for accessibility to style all link states differently or not. If you use different style rules for each state, users are notified about every change indeed, however is that always a good thing? Too many state changes can cause information overload and confusion to the user.</p>\n<p>Personally, I tend to create one style for the default link state, a second one for the <code>:hover</code>, <code>:active</code>, and <code>:focus</code> states, and sometimes a third one for <code>:visited</code> links. However, I still can't tell if this is the best solution for accessibility. If you are interested in the topic here's an <a href=\"https://ux.stackexchange.com/questions/73403/should-focus-and-hover-styles-be-the-same-or-distinct\" target=\"_blank\">interesting StackOverflow UX discussion</a> on whether the styling of the <code>:focus</code> and <code>:hover</code> states should be the same or distinct.</p>\n<p>However, there's an important thing you should keep in mind by all means. <strong>Don't remove the dotted outline that browsers use for the <code>:focus</code> state</strong>. Keyboard (tab) navigation will be useless if the focused element is not visible on the screen. If you remove the dotted outline, keyboard users will literally lose focus. If you're annoyed by the default outline style <a href=\"https://a11yproject.com/posts/never-remove-css-outlines/\" target=\"_blank\">make it less obtrusive with extra styling</a>, but don't remove it.</p>\n<h2>Read more</h2>\n<p>On this blog, I cover accessibility-related topics that are less widely discussed. If you want to read more, check out my article about why <a href=\"https://www.annalytic.com/documentation-part-of-accessibility.html\" target=\"_blank\">software documentation is part of accessibility</a>, too.</p>",
      "date_published": "2017-10-06T00:00:00Z"
    }
    ,
    {
      "id": "https://www.annalytic.com/documentation-part-of-accessibility.html",
      "url": "https://www.annalytic.com/documentation-part-of-accessibility.html",
      "title": "Software documentation is part of accessibility",
      "content_html": "<p>We mostly discuss accessibility as a way to enable people with disabilities to use a website or application. However, the accessibility needs of users who don't have any disabilities but experience other kinds of hardships are less widely discussed.</p><p>\n\n</p><p>The lack of knowledge on a given subject is such a hardship. Providing technical documentation that addresses this problem is also an essential part of accessibility, especially in the case of open-source development. Here, users don't only act as end-users but also might want to contribute to the code as developers.</p>\n    \n<p>If you have ever had to use poorly documented software you know what I'm talking about. Boring, badly structured, and user-hostile documentation can make people give up on a tool, just like an overly complicated purchasing process can result in shopping cart abandonment on eCommerce websites.</p>\n    \n<h2>Two types of technical documentation</h2>\n    \n<p>Essentially, there are two types of technical documentation:</p>\n<ol>\n    <li>documentation created for end-users</li>\n    <li>documentation created for developers</li>\n</ol>\n    \n<h3>End-user documentation</h3>\n    \n<p>Companies tend to focus more on end-user documentation. You can find <a href=\"http://blog.screensteps.com/10-examples-of-great-end-user-documentation\" target=\"_blank\">nice and user-friendly examples</a> of this kind of docs. However, even the best-designed end-user docs might lack crucial accessibility features such as sufficient color contrast or closed captioning.</p>\n    \n<p>For instance, have a look at Salesforce's <a href=\"https://www.salesforce.com/uk/learning-centre/\" target=\"_blank\">Learning Centre</a>. Overall, they did a great job with the docs. The information is well-structured and logical, and the docs don't use too much technical jargon.</p>\n    \n<p>However, if you take a closer look you will find that some crucial accessibility features are missing. For example, links are distinguished only by color rather than providing a <a href=\"https://www.annalytic.com/link-accessibility-colors-not-enough.html\">non-color designator</a> such as an underline.</p>\n    \n<figure><a href=\"https://www.salesforce.com/uk/learning-centre/tech/cloudcomputing/\" target=\"_blank\"><img class=\"img-fluid\" src=\"https://www.annalytic.com/assets/img/posts/documentation-part-of-accessibility/salesforce-learning-centre.jpg\" alt=\"Salesforce Learning Centre - Documentation Accessibility\" /></a></figure>\n    \n<h3>Developer documentation</h3>\n    \n<p>Most technical documentation created for developers had been in a poor state for many years. They didn't simply lack accessibility features but also used unstructured text blocks, unreadable fonts and small line height, lacked table of contents, and were visually unappealing on the whole.</p>\n    \n<p>The rise of video tutorials made the scene of developer docs much better. At about the same time, well-designed documentations began to appear.</p>\n    \n<p>The first developer documentation I really liked was the <a href=\"https://foundation.zurb.com/sites/docs/\" target=\"_blank\">Zurb Foundation Docs</a>. It has improved a lot since I first saw it, but even the earlier versions were designed, written, and structured in a way that made me want to learn.</p>\n    \n<figure><a href=\"http://foundation.zurb.com/sites/docs/global.html\" target=\"_blank\"><img class=\"img-fluid\" src=\"https://www.annalytic.com/assets/img/posts/documentation-part-of-accessibility/foundation-docs.jpg\" alt=\"Foundation Docs - Documentation Accessibility\" /></a></figure>\n    \n<p><a href=\"https://www.atlassian.com/git/tutorials/what-is-version-control\" target=\"_blank\">Atlassian's Git Tutorials</a> constitute another good example of user-friendly developer documentation. They are just as well-structured as the Foundation Docs but also come with great explanatory illustrations (in SVG!) and a <a href=\"https://www.atlassian.com/git/tutorials/atlassian-git-cheatsheet\" target=\"_blank\">downloadable cheatsheet</a>.</p>\n    \n<figure><a href=\"https://www.atlassian.com/git/tutorials/learn-git-with-bitbucket-cloud#copy-and-add-files\" target=\"_blank\"><img class=\"img-fluid\" src=\"https://www.annalytic.com/assets/img/posts/documentation-part-of-accessibility/atlassian-git-docs.jpg\" alt=\"Atlassian Git Docs - Documentation Accessibility\" /></a></figure>\n    \n<p>Both Foundation Docs and Git Tutorials present the information in a way that is accessible to users without much knowledge on the subject. Still, both have some accessibility issues that might be a problem for users with disabilities (e.g. color contrast problems).</p>\n    \n<h2>Two levels of documentation accessibility</h2>\n    \n<p>Documentation accessibility has two levels that both end-user and developer docs should implement:</p>\n\n<ol>\n    <li>The docs to be accessible for users without sufficient knowledge of the tool.</li>\n    <li>The docs to be accessible for users who may have different disabilities.</li>\n</ol>\n\n<p>The two levels can also intersect, as there can be users who are affected by both problems (i.e. don't have the sufficient knowledge plus have a disability).</p>\n    \n<p>The three examples I mentioned in this article (Salesforce, Foundation, Atlassian) handle the first level of documentation accessibility really well, as they:</p>\n\n<ul>\n    <li>don't use technical jargon, or if they do they give the necessary explanation,</li>\n    <li>provide menus/widgets/table of contents to ease navigation,</li>\n    <li>structure pages (careful typography, enough white space, vertical rhythm, etc.),</li>\n    <li>provide illustrations or instructional videos,</li>\n    <li>provide examples of usage, demos, or code snippets.</li>\n</ul>\n\n<p>They also partially implement the second level of accessibility. However, you can still find issues here and there, such as color contrast, link visibility, or video captioning.</p>\n    \n<h2>Wrapping up</h2>\n    \n<p>I don't know if perfectly accessible docs exist or not, but if they do they should implement both levels of documentation accessibility. It's certainly not something easy to accomplish, as there are so many things to pay attention to.</p>\n\n<p>However, documentation accessibility is still an important part of accessibility. First, because users with disabilities shouldn't be excluded from adopting new technologies, but also because it greatly impacts how many people are willing to go the extra mile to pick up a new tool.</p>\n    ",
      "date_published": "2017-09-06T00:00:00Z"
    }
    
  ]
}